--[[
	utils_json.script by Penomatikus, 2023

	Provides two global functions to create valid JSON from the following Lua types:
	boolean, number, string, table (recursive parsing), userdata( CTime -> RFC3339+02:00) and nil.  

	The implementation is using the dispatcher pattern to decouple concerns by defining a handler 
	for each type listed above. It maps these types to corresponding handlers, which are called to 
	process the input.
	
	Use to_json(value, keyname) to create a JSON string: 
	utils_json.to_json(db.actor:character_community(), "faction")
	will result in: 
	"{
		"faction": ""actor_zombied""
	}"

	Use to_logfile(value, filename) to write ./appdata/logs/<filename>.json:
	utils_json.to_logfile(game_statistics.actor_miscellaneous, "actor_miscellaneous")
	will create ./appdata/logs/actor_miscellaneous.json, with the following content:
	{
		"actor_miscellaneous": {
			"actual_rept": 30,
			"actual_rank": 148
		}
	}

]]


--------------------------------------------------------------
-- local helpers
--------------------------------------------------------------
local open = "{"
local close = "}"
local ln = "\n"

---Repeat "\t" node_depth times to ident a nodes value correctly 
---@param node_depth number
---@return string
local function ident(node_depth) return string.rep("\t", node_depth) end 
---Bake the json-data into "{ }"
---@param data string
---@return string
local function bake_json(data) return open .. ln .. data .. ln .. close end
---Opposite of bake_json(data), just return the data without "{ }"
---@param data string
---@return string
local function no_bake(data) return data end

--------------------------------------------------------------
-- dispatcher & handlers
--------------------------------------------------------------

---json_handlers registes the handlers
local json_handlers = { }

---A dispatcher to choose the correct json handler by the type of value
---@param json_key string Not the json key
---@param value boolean|number|string|table|userdata For userdata only CTime can be parsed
---@param node_depth number Not the json node depth
---@param bake_Fn? function Default is `bake_json(data)` to apply a root encapsulation or not  
---@return string JSON JSON representation of the value
local function type_dispatcher(json_key, value, node_depth, bake_Fn)
	json_key = json_key or "missing_key"
	local cmd = type(value)
	local handler = json_handlers[cmd]
	if not handler then
		bake_Fn = node_depth == 1 and bake_json or no_bake -- If > 1, baking is handled by the table_handler
		err_not_implemented = "no json handler implemented for: " .. cmd
		return json_handlers["string"](json_key, err_not_implemented, node_depth, bake_Fn)
	end
	return handler(json_key, value, node_depth, bake_Fn)
end

local weak_lookup = {}
setmetatable(weak_lookup, {__mode = "k"})

---A json handler for lua tables
local function table_handler(json_table_name, t, node_depth, bake_Fn)
	bake_Fn = bake_Fn or bake_json
	local json = ""
	local p_node_depth = node_depth
	local c_node_depth = node_depth + 1

	-- open then new json node
	json = string.format('%s"%s": %s', ident(p_node_depth), json_table_name, open)
	-- close it immediately, if the table is empty
	local next = next -- ensure no indexing of the global "environment" hash table
	if not next(t) then
		return json .. close
	end

	json = json .. ln

	for k, v in pairs(t) do 
		if weak_lookup[v] then 
			json = json .. type_dispatcher(k, "self reference: " .. k, c_node_depth, no_bake)
		else
			weak_lookup[v] = 1
			json = json .. type_dispatcher(k, v, c_node_depth, no_bake)
		end
		-- End of node check
		json = json .. (next(t, k) and "," .. ln or ln .. ident(p_node_depth) .. close)
	end

	return bake_Fn(json)
end

---A json handler for lua numbers
local function number_handler(json_key, n, node_depth, bake_Fn) 
	bake_Fn = bake_Fn or bake_json
	return bake_Fn(string.format('%s"%s": %d', ident(node_depth), json_key, n))
end

---A json handler for lua booleans
local function boolean_handler(json_key, b, node_depth, bake_Fn) 
	bake_Fn = bake_Fn or bake_json
	return bake_Fn(string.format('%s"%s": %s', ident(node_depth), json_key, tostring(b)))
end

---A json handler for lua nil values
local function nil_handler(json_key, v, node_depth, bake_Fn) 
	bake_Fn = bake_Fn or bake_json
	v = "null"
	return bake_Fn(string.format('%s"%s": %s', ident(node_depth), json_key, v))
end

---A json handler for lua strings
local function string_handler(json_key, s, node_depth, bake_Fn) 
	bake_Fn = bake_Fn or bake_json
	local format = s == "null" and '%s"%s": %s' or '%s"%s": "%s"' -- in case a table uses "nil" to indicate nil 
	return bake_Fn(string.format(format, ident(node_depth), json_key, tostring(s)))
end

---A json handler for lua functions
local function function_handler(json_key, f, node_depth, bake_Fn)
	bake_Fn = bake_Fn or bake_json
	local err = function(msg) return string.format("function() - But: %s.", msg) end
	
	local info = debug.getinfo(f, "S") 
	if type(info) ~= "table" then 
		return bake_Fn(type_dispatcher(json_key, err("debugging failed"), node_depth, no_bake))
	end
    
	-- parsing the source until `info.linedefined` and extract function information
	local get_function_info = function() 
		local n = 1
		local source = io.open(info.source:sub(2):gsub("[\\/|\\]", "\\\\"), "r") -- remove the "@" prefix and replacing any "/" and "\" with "\\"
		if not source then return "", "", "", err("Couldn't open script file for parsing") end
		for line in source:lines() do			
			if n == info.linedefined then
				local isLocal = string.match(line, "local%s+") ~= nil
				local fn_name, fn_args = string.match(line, "([%a_-]+)%s*%((.*)%)") -- two group matching
				fn_name = fn_name == "function" and "anonymous" or fn_name
				fn_args = fn_name == "anonymous" and fn_args:gsub("%).*", "") or fn_args -- remove any tailing string after closing brackets
				source:close()
				return isLocal, fn_name, fn_args, nil
			end
			n = n + 1
		end 
		source:close()
		return "", "", "", err("Couldn't retrieve any function info")
	end
	
	local isLocal, name, args, any_error = get_function_info()
	if any_error then return bake_Fn(type_dispatcher(json_key, any_error, node_depth, no_bake)) end

	local function_table = {
		["type"] = info.what .. "-Function",
		["name"] = name,
		["args"] = args ~= "" and args or "null", -- "can't store nil in a table"
		["local"] = isLocal,
		["source"] = '.' .. string.match(info.source, "\\gamedata.*"),
		["line"] = info.linedefined
	}

	return bake_Fn(type_dispatcher(json_key, function_table, node_depth, no_bake))
end

---A json handler for lua userdata
local function userdata_handler(json_key, u, node_depth, bake_Fn)
	bake_Fn = bake_Fn or bake_json
	-- engine timestamp to RFC3339 +02:00 (because monolith is in ukraine).
	if u.timeToString then 
		local dt = utils_data.CTime_to_table(u)
		local rfc3339 = string.format('%04d-%02d-%02dT%02d:%02d:%02d.%03d+02:00', dt.Y, dt.M, dt.D, dt.h, dt.m, dt.s, dt.ms)
		return bake_Fn(string.format('%s"%s": "%s"', ident(node_depth), json_key, rfc3339))
	end
	-- Append new userdata convertions here
	return bake_Fn(string.format('%s"%s": "%s"', ident(node_depth), json_key, "unsupported userdata type"))
end

---register json_handlers after the compiler kowns about the handlers
json_handlers = {
	["boolean"] = boolean_handler,
	["function"] = function_handler,
	["nil"] = nil_handler,
	["number"] = number_handler,
	["string"] = string_handler,
	["table"] = table_handler,
	["userdata"] = userdata_handler,
}

--------------------------------------------------------------
-- Global functions
--------------------------------------------------------------

---to_json converts a Lua value to a valid JSON string. The keyname is used as the root-node JSON key.
---@param value boolean|number|string|table|userdata For userdata only CTime can be parsed
---@param keyname string If not set, keyname is "missing_key"
---@return string JSON A Valid string representation of value
function to_json(value, keyname) 
	return type_dispatcher(keyname, value, 1)
end

---to_logfile converts a Lua value to a JSON file with the specified name in `./appdata/logs/`.
---The filename is used as the root-node JSON key. Prints a debug message to std if the file creation failed.
---@param value boolean|number|string|table|userdata For userdata only CTime can be parsed
---@param filename string If not set, the file is named "log.json"
function to_logfile(value, filename)
	local fname = filename or "log"
	local appdatalog = getFS():update_path("$logs$","")
	local logfile = io.open(appdatalog .. "/" .. fname .. ".json","w")
	if logfile then
		logfile:write(type_dispatcher(filename, value, 1))
		logfile:close()
	else 
		printdbg("~ utils_json | the file [%s.json] is unavailable", filename)
	end
end